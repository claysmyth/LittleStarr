{
    "sourceFile": "databasing/databasing_utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1679696503650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1679696515263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,5 +2,14 @@\n \n def create_sorted_view(table_name, sort_column):\n     con = duckdb.connect()\n     con.execute(f\"CREATE VIEW sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.close()\n+\n+import duckdb\n+\n+def sort_table_by_column(table_name, sort_column):\n+    con = duckdb.connect()\n+    con.execute(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.execute(f\"DROP TABLE {table_name}\")\n+    con.execute(f\"ALTER TABLE sorted_{table_name} RENAME TO {table_name}\")\n     con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1679696525700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n import duckdb\n \n-def create_sorted_view(table_name, sort_column):\n+def create_sorted_view(table_name, sort_column, db_path):\n     con = duckdb.connect()\n     con.execute(f\"CREATE VIEW sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n-import duckdb\n \n def sort_table_by_column(table_name, sort_column):\n     con = duckdb.connect()\n     con.execute(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n"
                },
                {
                    "date": 1679696567271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import duckdb\n \n def create_sorted_view(table_name, sort_column, db_path):\n-    con = duckdb.connect()\n+    con = duckdb.connect(dabase=db_path)\n     con.execute(f\"CREATE VIEW sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n \n"
                },
                {
                    "date": 1679696612961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import duckdb\n \n def create_sorted_view(table_name, sort_column, db_path):\n     con = duckdb.connect(dabase=db_path)\n-    con.execute(f\"CREATE VIEW sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.execute(f\"CREATE VIEW {table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n \n def sort_table_by_column(table_name, sort_column):\n-    con = duckdb.connect()\n+    con = duckdb.connect(database=db_path)\n     con.execute(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.execute(f\"DROP TABLE {table_name}\")\n     con.execute(f\"ALTER TABLE sorted_{table_name} RENAME TO {table_name}\")\n     con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1679696621689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import duckdb\n \n def create_sorted_view(table_name, sort_column, db_path):\n     con = duckdb.connect(dabase=db_path)\n-    con.execute(f\"CREATE VIEW {table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.execute(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n \n def sort_table_by_column(table_name, sort_column):\n     con = duckdb.connect(database=db_path)\n     con.execute(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.execute(f\"DROP TABLE {table_name}\")\n-    con.execute(f\"ALTER TABLE sorted_{table_name} RENAME TO {table_name}\")\n+    con.execute(f\"ALTER TABLE {table_name} RENAME TO {table_name}\")\n     con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1679696627026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,6 +9,6 @@\n def sort_table_by_column(table_name, sort_column):\n     con = duckdb.connect(database=db_path)\n     con.execute(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.execute(f\"DROP TABLE {table_name}\")\n-    con.execute(f\"ALTER TABLE {table_name} RENAME TO {table_name}\")\n+    con.execute(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1679696660105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import duckdb\n \n def create_sorted_view(table_name, sort_column, db_path):\n     con = duckdb.connect(dabase=db_path)\n-    con.execute(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n \n def sort_table_by_column(table_name, sort_column):\n     con = duckdb.connect(database=db_path)\n-    con.execute(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n-    con.execute(f\"DROP TABLE {table_name}\")\n-    con.execute(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n+    con.sql(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.sql(f\"DROP TABLE {table_name}\")\n+    con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1679696680898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,8 @@\n \n \n def sort_table_by_column(table_name, sort_column):\n     con = duckdb.connect(database=db_path)\n-    con.sql(f\"CREATE TABLE sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.sql(f\"CREATE TABLE {table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.sql(f\"DROP TABLE {table_name}\")\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1680625841405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,41 @@\n \n \n def sort_table_by_column(table_name, sort_column):\n     con = duckdb.connect(database=db_path)\n-    con.sql(f\"CREATE TABLE {table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n+    con.sql(f\"CREATE TABLE {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.sql(f\"DROP TABLE {table_name}\")\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n\\ No newline at end of file\n-    con.close()\n+    con.close()\n+\n+def label_and_import_parquets(base_path, cols_to_drop):\n+    devices = os.listdir(base_path)\n+    for device in devices:\n+        device_file_path = base_path + device + '/Overnight/'\n+        device_identifier = device[3:]\n+        \n+        ind = 0\n+        for session_parquet in glob.glob(device_file_path + '/*.parquet'):\n+            df = pl.read_parquet(session_parquet)\n+            df = df.drop(cols_to_drop)\n+            \n+            end_date = pl.select(df[df.height-1,['localTime']])[0,0].date().strftime('%m-%d-%y')\n+            session_classifier = device_identifier + '_' + end_date\n+\n+            session_num = os.path.split(session_parquet)[1].split(\"_\")[0]\n+            df = df.with_column(pl.lit(session_num).alias('Session#'))\n+            df = df.with_column(pl.lit(session_classifier).alias('SessionIdentity'))\n+\n+            if not 'TD_key1' in df.columns:\n+                df = df.drop(['Power_Band3', 'Power_Band4'])\n+                df = df.rename({'TD_key0': 'TD_BG'})\n+            elif not 'TD_key0' in df.columns:\n+                df = df.drop(['Power_Band1', 'Power_Band2'])\n+                df = df.rename({'TD_key1': 'TD_BG', 'Power_Band3': 'Power_Band1', 'Power_Band4': 'Power_Band2'})\n+                print(f\"For {session_parquet} recasted TD_key1 as TD_BG and Power Bands 3 and 4 as 1 and 2, respectively.\")\n+\n+            df_arrow = df.to_arrow()\n+            if ind == 0:\n+                con.execute(f\"CREATE OR REPLACE TABLE overnight.r{device_identifier} AS SELECT * FROM df_arrow\")\n+            else:\n+                con.execute(f\"INSERT INTO overnight.r{device_identifier} SELECT * FROM df_arrow\")\n+            ind += 1\n\\ No newline at end of file\n"
                },
                {
                    "date": 1680625847242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     con.sql(f\"DROP TABLE {table_name}\")\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n \n+\n def label_and_import_parquets(base_path, cols_to_drop):\n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n"
                },
                {
                    "date": 1680625857462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import duckdb\n+import os\n \n def create_sorted_view(table_name, sort_column, db_path):\n     con = duckdb.connect(dabase=db_path)\n     con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n"
                },
                {
                    "date": 1680625891645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import duckdb\n import os\n+import polars as pl\n \n def create_sorted_view(table_name, sort_column, db_path):\n     con = duckdb.connect(dabase=db_path)\n     con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n@@ -15,8 +16,9 @@\n     con.close()\n \n \n def label_and_import_parquets(base_path, cols_to_drop):\n+    \n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n         device_identifier = device[3:]\n"
                },
                {
                    "date": 1680625901907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,18 +7,18 @@\n     con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n \n-def sort_table_by_column(table_name, sort_column):\n+def sort_table_by_column(table_name, sort_column, db_path):\n     con = duckdb.connect(database=db_path)\n     con.sql(f\"CREATE TABLE {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.sql(f\"DROP TABLE {table_name}\")\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n \n \n def label_and_import_parquets(base_path, cols_to_drop):\n-    \n+    con = duckdb.connect(dabase=db_path)\n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n         device_identifier = device[3:]\n"
                },
                {
                    "date": 1680625913961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n \n \n-def label_and_import_parquets(base_path, cols_to_drop):\n+def label_and_import_parquets(base_path, cols_to_drop, db_path):\n     con = duckdb.connect(dabase=db_path)\n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n@@ -47,5 +47,6 @@\n             if ind == 0:\n                 con.execute(f\"CREATE OR REPLACE TABLE overnight.r{device_identifier} AS SELECT * FROM df_arrow\")\n             else:\n                 con.execute(f\"INSERT INTO overnight.r{device_identifier} SELECT * FROM df_arrow\")\n-            ind += 1\n\\ No newline at end of file\n+            ind += 1\n+    con.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1680626056957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n \n \n-def label_and_import_parquets(base_path, cols_to_drop, db_path):\n+def label_and_import_sleep_overnight_parquets(base_path, cols_to_drop, db_path):\n     con = duckdb.connect(dabase=db_path)\n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n"
                },
                {
                    "date": 1680626067930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n \n \n-def label_and_import_sleep_overnight_parquets(base_path, cols_to_drop, db_path):\n+def label_and_import_sleep_training_parquets(base_path, cols_to_drop, db_path):\n     con = duckdb.connect(dabase=db_path)\n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n"
                },
                {
                    "date": 1680626771544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import os\n import polars as pl\n \n def create_sorted_view(table_name, sort_column, db_path):\n-    con = duckdb.connect(dabase=db_path)\n+    con = duckdb.connect(database=db_path)\n     con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n \n@@ -15,9 +15,9 @@\n     con.sql(f\"ALTER TABLE {table_name}_sorted RENAME TO {table_name}\")\n     con.close()\n \n \n-def label_and_import_sleep_training_parquets(base_path, cols_to_drop, db_path):\n+def label_and_import_sleep_training_data_parquets(base_path, cols_to_drop, db_path):\n     con = duckdb.connect(dabase=db_path)\n     devices = os.listdir(base_path)\n     for device in devices:\n         device_file_path = base_path + device + '/Overnight/'\n"
                },
                {
                    "date": 1680626831764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import os\n import polars as pl\n \n def create_sorted_view(table_name, sort_column, db_path):\n+    print(db_path)\n     con = duckdb.connect(database=db_path)\n     con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n"
                },
                {
                    "date": 1680626947152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import os\n import polars as pl\n \n def create_sorted_view(table_name, sort_column, db_path):\n-    print(db_path)\n     con = duckdb.connect(database=db_path)\n     con.sql(f\"CREATE VIEW {table_name}_sorted AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n     con.close()\n \n"
                }
            ],
            "date": 1679696503650,
            "name": "Commit-0",
            "content": "import duckdb\n\ndef create_sorted_view(table_name, sort_column):\n    con = duckdb.connect()\n    con.execute(f\"CREATE VIEW sorted_{table_name} AS SELECT * FROM {table_name} ORDER BY {sort_column}\")\n    con.close()"
        }
    ]
}